原型模式：
	1.   概述
		我们都知道，创建型模式一般是用来创建一个新的对象，然后我们使用这个对象完成一些对象的操作，我们通过原型模式可以快速的创建一个对象而不需要提供专门的new()操作就可以快速完成对象的创建，这无疑是一种非常有效的方式，快速的创建一个新的对象。

		例子1：孙悟空拔下一嘬猴毛，轻轻一吹就会变出好多的孙悟空来。

		例子2：寄个快递
			下面是一个邮寄快递的场景：
			“给我寄个快递。”顾客说。
			“寄往什么地方？寄给……？”你问。
			“和上次差不多一样，只是邮寄给另外一个地址，这里是邮寄地址……”顾客一边说一边把写有邮寄地址的纸条给你。
			“好！”你愉快地答应，因为你保存了用户的以前邮寄信息，只要复制这些数据，然后通过简单的修改就可以快速地创建新的快递数据了。
		例子3：写简历
			简历内容都一样，可以投网络工程师，软件工程师，后台工程师，只需要改期望的类型，其他的内容都一样

	2. 问题
		当对象的构造函数非常复杂，在生成新对象的时候非常耗时间、耗资源的情况？我们是怎么来创建呢？

	3. 解决方案
			 通过复制（克隆、拷贝）一个指定类型的对象来创建更多同类型的对象。这个指定的对象可被称为“原型”对象，也就是通过复制原型对象来得到更多同类型的对象。即原型设计模式。
			 
	4. 适用性		原型模式的主要思想是基于现有的对象克隆一个新的对象出来，一般是有对象的内部提供克隆的方法，通过该方法返回一个对象的副本，这种创建对象的方式，相比我们之前说的几类创建型模式还是有区别的，之前的讲述的工厂模式与抽象工厂都是通过工厂封装具体的new操作的过程，返回一个新的对象，有的时候我们通过这样的创建工厂创建对象不值得，特别是以下的几个场景的时候，可能使用原型模式更简单也效率更高。

		• 1）当一个系统应该独立于它的产品创建、构成和表示时，要使用 Prototype模式

		• 2）当要实例化的类是在运行时刻指定时，例如，通过动态装载；

		• 3）为了避免创建一个与产品类层次平行的工厂类层次时

		• 4）当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些。（也就是当我们在处理一些对象比较简单，并且对象之间的区别很小，可能只是很固定的几个属性不同的时候，可能我们使用原型模式更合适）。