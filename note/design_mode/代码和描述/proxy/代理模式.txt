代理模式
	在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。

	在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。
	
介绍	
	意图：为其他对象提供一种代理以控制对这个对象的访问。

	主要解决：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），
		直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。
		比如玩游戏，CF,LOL，腾讯代理，用户只需要腾讯的账号登陆就可以了，不然就需要访问CF在韩国的服务器，CF专有的账号，LOL的就需要访问LOL在美国的服务器，LOL专有的账号，代理模式就是省去了用户不需要去做自己不关系，额外的操作
		
	优点： 1、职责清晰。 2、高扩展性。 3、智能化。

	缺点： 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。
中介隔离作用：
	在某些情况下，一个客户类不想或者不能直接引用一个委托对象，而代理类对象可以在客户类和委托对象之间起到中介的作用，其特征是代理类和委托类实现相同的接口。
开闭原则，增加功能：
	代理类除了是客户类和委托类的中介之外，我们还可以通过给代理类增加额外的功能来扩展委托类的功能，这样做我们只需要修改代理类而不需要再修改委托类，符合代码设计的开闭原则。
	代理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类，以及事后对返回结果的处理等。代理类本身并不真正实现服务，而是同过调用委托类的相关方法，来提供特定的服
	务。真正的业务功能还是由委托类来实现，但是可以在业务功能执行的前后加入一些公共的服务。例如我们想给项目加入缓存、日志这些功能，我们就可以使用代理类来完成，而没必要打
	  ，。开已经封装好的委托类。